; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24213.1 

	TITLE	C:\Users\Пользователь\Documents\Visual Studio 2015\Projects\КОНТР 2\Лаб.раб. 1\HelloWorld.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?m@@3HA						; m
PUBLIC	?k@@3HA						; k
PUBLIC	?k2@@3PAHA					; k2
PUBLIC	?z@@3HA						; z
_BSS	SEGMENT
?m@@3HA	DD	01H DUP (?)				; m
?k@@3HA	DD	01H DUP (?)				; k
?k2@@3PAHA DD	0aH DUP (?)				; k2
?z@@3HA	DD	01H DUP (?)				; z
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??$swap@HX@std@@YAXAAH0@Z			; std::swap<int,void>
PUBLIC	??$move@AAH@std@@YA$$QAHAAH@Z			; std::move<int &>
PUBLIC	?push@@YAXHPAUst@@@Z				; push
PUBLIC	?pok@@YAXPAUst@@@Z				; pok
PUBLIC	?pop@@YAHPAUst@@@Z				; pop
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	?rek@@YAHHPAUst@@0@Z				; rek
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_03OJJHGHEE@Rus?$AA@			; `string'
PUBLIC	??_C@_0CE@MGGHCBNK@?P?$OA?a?n?r?$OA?5?q?n?5?q?r?e?j?n?l?4?5?B?$PL?a?e?p?h?r?e?5?j?n?l?$OA?m@ ; `string'
PUBLIC	??_C@_0BI@JAMJEBM@1?5?9?5?D?n?a?$OA?b?k?e?m?h?e?5?$PN?k?e?l?e?m?r?$OA?$AA@ ; `string'
PUBLIC	??_C@_0BI@PPAFJKKE@2?5?9?5?H?g?b?k?e?w?e?m?h?e?5?$PN?k?e?l?e?m?r?$OA?$AA@ ; `string'
PUBLIC	??_C@_09DGFCPOAI@3?5?9?5?B?$PL?b?n?d?$AA@	; `string'
PUBLIC	??_C@_09BJEAIKFH@4?5?9?5?B?$PL?u?n?d?$AA@	; `string'
PUBLIC	??_C@_0BO@LHDMDAPB@?B?b?e?d?h?r?e?5?$PN?k?e?l?e?m?r?5?d?k?$PP?5?b?q?r?$OA?b?j?h?3?5?$AA@ ; `string'
PUBLIC	??_C@_0M@GHDAOBON@?B?e?q?$PM?5?q?r?e?j?3?5?$AA@	; `string'
PUBLIC	??_C@_06HCKFNCEA@?o?s?q?r?n?$CB?$AA@		; `string'
PUBLIC	??_C@_0L@PJPKBBI@?Q?r?e?j?5?o?s?q?r?$CB?$AA@	; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_strlen:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0L@PJPKBBI@?Q?r?e?j?5?o?s?q?r?$CB?$AA@
CONST	SEGMENT
??_C@_0L@PJPKBBI@?Q?r?e?j?5?o?s?q?r?$CB?$AA@ DB 0d1H, 0f2H, 0e5H, 0eaH, ' '
	DB	0efH, 0f3H, 0f1H, 0f2H, '!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCKFNCEA@?o?s?q?r?n?$CB?$AA@
CONST	SEGMENT
??_C@_06HCKFNCEA@?o?s?q?r?n?$CB?$AA@ DB 0efH, 0f3H, 0f1H, 0f2H, 0eeH, '!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GHDAOBON@?B?e?q?$PM?5?q?r?e?j?3?5?$AA@
CONST	SEGMENT
??_C@_0M@GHDAOBON@?B?e?q?$PM?5?q?r?e?j?3?5?$AA@ DB 0c2H, 0e5H, 0f1H, 0fcH
	DB	' ', 0f1H, 0f2H, 0e5H, 0eaH, ': ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LHDMDAPB@?B?b?e?d?h?r?e?5?$PN?k?e?l?e?m?r?5?d?k?$PP?5?b?q?r?$OA?b?j?h?3?5?$AA@
CONST	SEGMENT
??_C@_0BO@LHDMDAPB@?B?b?e?d?h?r?e?5?$PN?k?e?l?e?m?r?5?d?k?$PP?5?b?q?r?$OA?b?j?h?3?5?$AA@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0fdH, 0ebH, 0e5H, 0ecH
	DB	0e5H, 0edH, 0f2H, ' ', 0e4H, 0ebH, 0ffH, ' ', 0e2H, 0f1H, 0f2H
	DB	0e0H, 0e2H, 0eaH, 0e8H, ': ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BJEAIKFH@4?5?9?5?B?$PL?u?n?d?$AA@
CONST	SEGMENT
??_C@_09BJEAIKFH@4?5?9?5?B?$PL?u?n?d?$AA@ DB '4 - ', 0c2H, 0fbH, 0f5H, 0eeH
	DB	0e4H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09DGFCPOAI@3?5?9?5?B?$PL?b?n?d?$AA@
CONST	SEGMENT
??_C@_09DGFCPOAI@3?5?9?5?B?$PL?b?n?d?$AA@ DB '3 - ', 0c2H, 0fbH, 0e2H, 0eeH
	DB	0e4H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PPAFJKKE@2?5?9?5?H?g?b?k?e?w?e?m?h?e?5?$PN?k?e?l?e?m?r?$OA?$AA@
CONST	SEGMENT
??_C@_0BI@PPAFJKKE@2?5?9?5?H?g?b?k?e?w?e?m?h?e?5?$PN?k?e?l?e?m?r?$OA?$AA@ DB '2'
	DB	' - ', 0c8H, 0e7H, 0e2H, 0ebH, 0e5H, 0f7H, 0e5H, 0edH, 0e8H, 0e5H
	DB	' ', 0fdH, 0ebH, 0e5H, 0ecH, 0e5H, 0edH, 0f2H, 0e0H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JAMJEBM@1?5?9?5?D?n?a?$OA?b?k?e?m?h?e?5?$PN?k?e?l?e?m?r?$OA?$AA@
CONST	SEGMENT
??_C@_0BI@JAMJEBM@1?5?9?5?D?n?a?$OA?b?k?e?m?h?e?5?$PN?k?e?l?e?m?r?$OA?$AA@ DB '1'
	DB	' - ', 0c4H, 0eeH, 0e1H, 0e0H, 0e2H, 0ebH, 0e5H, 0edH, 0e8H, 0e5H
	DB	' ', 0fdH, 0ebH, 0e5H, 0ecH, 0e5H, 0edH, 0f2H, 0e0H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MGGHCBNK@?P?$OA?a?n?r?$OA?5?q?n?5?q?r?e?j?n?l?4?5?B?$PL?a?e?p?h?r?e?5?j?n?l?$OA?m@
CONST	SEGMENT
??_C@_0CE@MGGHCBNK@?P?$OA?a?n?r?$OA?5?q?n?5?q?r?e?j?n?l?4?5?B?$PL?a?e?p?h?r?e?5?j?n?l?$OA?m@ DB 0d0H
	DB	0e0H, 0e1H, 0eeH, 0f2H, 0e0H, ' ', 0f1H, 0eeH, ' ', 0f1H, 0f2H
	DB	0e5H, 0eaH, 0eeH, 0ecH, '. ', 0c2H, 0fbH, 0e1H, 0e5H, 0f0H, 0e8H
	DB	0f2H, 0e5H, ' ', 0eaH, 0eeH, 0ecH, 0e0H, 0edH, 0e4H, 0f3H, ':', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJJHGHEE@Rus?$AA@
CONST	SEGMENT
??_C@_03OJJHGHEE@Rus?$AA@ DB 'Rus', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 141  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 142  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 143  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 130  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 14		 jne	 SHORT $LN1@sentry

; 133  : 				this->_Myostr._Osfx();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 123  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 122  : 			: _Sentry_base(_Ostr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 6e		 je	 SHORT $LN2@sentry
  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	85 c0		 test	 eax, eax
  00096	74 4e		 je	 SHORT $LN2@sentry
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b7	74 2d		 je	 SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c4	8b f4		 mov	 esi, esp
  000c6	8b ca		 mov	 ecx, edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b f4		 mov	 esi, esp
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	8b ca		 mov	 ecx, edx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 127  : 			}

  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 106  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 			if (_Myostr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 109  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 100  : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 			: _Myostr(_Ostr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 101  : 			if (_Myostr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 103  : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\пользователь\documents\visual studio 2015\projects\контр 2\лаб.раб. 1\helloworld.cpp
;	COMDAT ?rek@@YAHHPAUst@@0@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_y$ = 12						; size = 4
_MySTK$ = 16						; size = 4
?rek@@YAHHPAUst@@0@Z PROC				; rek, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 70   : 	if ((y->head->v > p) && (z == 1))

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	8b 11		 mov	 edx, DWORD PTR [ecx]
  00026	3b 55 08	 cmp	 edx, DWORD PTR _p$[ebp]
  00029	7e 1a		 jle	 SHORT $LN2@rek
  0002b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?z@@3HA, 1	; z
  00032	75 11		 jne	 SHORT $LN2@rek

; 71   : 	{
; 72   : 		y->head= NULL;

  00034	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00037	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 73   : 		return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 ab 00 00 00	 jmp	 $LN1@rek
$LN2@rek:

; 74   : 	}
; 75   : 	if((y->head->v < p) && (z == 1))

  00045	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004d	3b 55 08	 cmp	 edx, DWORD PTR _p$[ebp]
  00050	7d 10		 jge	 SHORT $LN3@rek
  00052	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?z@@3HA, 1	; z
  00059	75 07		 jne	 SHORT $LN3@rek

; 76   : 		return 0;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 8e 00 00 00	 jmp	 $LN1@rek
$LN3@rek:

; 77   : 	if (y->head->next == NULL)

  00062	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0006c	75 23		 jne	 SHORT $LN4@rek

; 78   : 	{
; 79   : 		if (y->head->v > p)

  0006e	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00071	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	3b 55 08	 cmp	 edx, DWORD PTR _p$[ebp]
  00079	7e 0e		 jle	 SHORT $LN6@rek

; 80   : 		{
; 81   : 			y->head = NULL;

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0007e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 82   : 			return 0;

  00085	33 c0		 xor	 eax, eax
  00087	eb 67		 jmp	 SHORT $LN1@rek
$LN6@rek:

; 83   : 		}
; 84   : 		MySTK = y;

  00089	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0008c	89 45 10	 mov	 DWORD PTR _MySTK$[ebp], eax

; 85   : 	}
; 86   : 	else

  0008f	eb 5f		 jmp	 SHORT $LN1@rek
$LN4@rek:

; 87   : 	{
; 88   : 		if (y->head->v > p)

  00091	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00094	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	3b 55 08	 cmp	 edx, DWORD PTR _p$[ebp]
  0009c	7e 25		 jle	 SHORT $LN7@rek

; 89   : 		{
; 90   : 			y->head = y->head->next;

  0009e	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000a1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a4	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  000a7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000aa	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 91   : 			rek(p, y, MySTK);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _MySTK$[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000b4	51		 push	 ecx
  000b5	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000b8	52		 push	 edx
  000b9	e8 00 00 00 00	 call	 ?rek@@YAHHPAUst@@0@Z	; rek
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 92   : 		}
; 93   : 		else

  000c1	eb 2d		 jmp	 SHORT $LN1@rek
$LN7@rek:

; 94   : 		{
; 95   : 			swap(y->head->next->v, y->head->v);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c9	51		 push	 ecx
  000ca	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  000cd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000d0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$swap@HX@std@@YAXAAH0@Z ; std::swap<int,void>
  000d9	83 c4 08	 add	 esp, 8

; 96   : 			rek(p, y, MySTK);

  000dc	8b 45 10	 mov	 eax, DWORD PTR _MySTK$[ebp]
  000df	50		 push	 eax
  000e0	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  000e3	51		 push	 ecx
  000e4	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 ?rek@@YAHHPAUst@@0@Z	; rek
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@rek:

; 97   : 		}
; 98   : 	}
; 99   : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000f9	3b ec		 cmp	 ebp, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
?rek@@YAHHPAUst@@0@Z ENDP				; rek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 991  : 	{	// insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 992  : 	_Ostr.put(_Ostr.widen('\n'));

  0001e	8b f4		 mov	 esi, esp
  00020	6a 0a		 push	 10			; 0000000aH
  00022	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b ca		 mov	 ecx, edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b f4		 mov	 esi, esp
  0003e	0f b6 c0	 movzx	 eax, al
  00041	50		 push	 eax
  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 993  : 	_Ostr.flush();

  00052	8b f4		 mov	 esi, esp
  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 994  : 	return (_Ostr);

  00064	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 995  : 	}

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv342 = -348						; size = 8
tv290 = -344						; size = 4
tv287 = -344						; size = 8
tv285 = -344						; size = 4
tv328 = -340						; size = 8
tv289 = -340						; size = 4
tv284 = -340						; size = 4
tv286 = -336						; size = 4
tv137 = -336						; size = 4
tv288 = -333						; size = 1
tv283 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 780  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 781  : 	typedef char _Elem;
; 782  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 783  : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 784  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0004b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length
  00054	83 c4 04	 add	 esp, 4
  00057	33 c9		 xor	 ecx, ecx
  00059	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0005c	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 785  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv328[ebp], eax
  00081	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv328[ebp+4], edx
  00087	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp+4], 0
  0008e	7c 79		 jl	 SHORT $LN17@operator
  00090	7f 09		 jg	 SHORT $LN24@operator
  00092	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp], 0
  00099	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  0009b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a6	8b f4		 mov	 esi, esp
  000a8	8b ca		 mov	 ecx, edx
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  000bd	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv342[ebp+4], edx
  000c3	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv342[ebp+4]
  000c9	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000cc	7c 3b		 jl	 SHORT $LN17@operator
  000ce	7f 0b		 jg	 SHORT $LN25@operator
  000d0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv342[ebp]
  000d6	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000d9	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000de	8b 02		 mov	 eax, DWORD PTR [edx]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e3	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000e6	8b f4		 mov	 esi, esp
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000f8	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000fb	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00101	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00107	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00109	0f 57 c0	 xorps	 xmm0, xmm0
  0010c	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  00114	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  0011a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0011d	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00123	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 786  : 		? 0 : _Ostr.width() - _Count;
; 787  : 	const typename _Myos::sentry _Ok(_Ostr);

  00126	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00129	50		 push	 eax
  0012a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0012d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00132	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 788  : 
; 789  : 	if (!_Ok)

  00139	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0013c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00141	0f b6 c0	 movzx	 eax, al
  00144	85 c0		 test	 eax, eax
  00146	75 0e		 jne	 SHORT $LN8@operator

; 790  : 		_State |= ios_base::badbit;

  00148	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0014b	83 c8 04	 or	 eax, 4
  0014e	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 791  : 	else

  00151	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 792  : 		{	// state okay, insert
; 793  : 		_TRY_IO_BEGIN

  00156	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 794  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0015a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00162	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00165	8b f4		 mov	 esi, esp
  00167	8b ca		 mov	 ecx, edx
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0016f	3b f4		 cmp	 esi, esp
  00171	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00176	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  0017c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00182	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00187	83 f8 40	 cmp	 eax, 64			; 00000040H
  0018a	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00190	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00192	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00195	83 e8 01	 sub	 eax, 1
  00198	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  0019b	83 d9 00	 sbb	 ecx, 0
  0019e	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001a1	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001a4	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a8	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001ae	7f 0a		 jg	 SHORT $LN26@operator
  001b0	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001b4	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),

  001ba	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c5	8b f4		 mov	 esi, esp
  001c7	8b ca		 mov	 ecx, edx
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001cf	3b f4		 cmp	 esi, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d6	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  001dc	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001e7	8b f4		 mov	 esi, esp
  001e9	8b ca		 mov	 ecx, edx
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001fe	8b f4		 mov	 esi, esp
  00200	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  00207	50		 push	 eax
  00208	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00214	3b f4		 cmp	 esi, esp
  00216	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021b	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00221	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00227	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0022d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00232	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00238	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0023e	52		 push	 edx
  0023f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0024b	83 c4 08	 add	 esp, 8
  0024e	0f b6 c8	 movzx	 ecx, al
  00251	85 c9		 test	 ecx, ecx
  00253	74 0b		 je	 SHORT $LN12@operator

; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

  00255	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00258	83 c8 04	 or	 eax, 4
  0025b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 800  : 					break;

  0025e	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 801  : 					}
; 802  : 
; 803  : 		if (_State == ios_base::goodbit

  00260	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 804  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00265	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00269	75 6e		 jne	 SHORT $LN13@operator
  0026b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0026e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00270	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00273	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00276	8b f4		 mov	 esi, esp
  00278	8b ca		 mov	 ecx, edx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0028d	8b f4		 mov	 esi, esp
  0028f	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00292	50		 push	 eax
  00293	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00296	51		 push	 ecx
  00297	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0029a	52		 push	 edx
  0029b	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002a7	3b f4		 cmp	 esi, esp
  002a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ae	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  002b4	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  002ba	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  002c0	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002c3	75 0b		 jne	 SHORT $LN27@operator
  002c5	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp+4]
  002cb	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002ce	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 805  : 			_State |= ios_base::badbit;

  002d0	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002d3	83 c8 04	 or	 eax, 4
  002d6	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 806  : 
; 807  : 		if (_State == ios_base::goodbit)

  002d9	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002dd	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 808  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002e3	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002e5	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002e8	83 e8 01	 sub	 eax, 1
  002eb	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002ee	83 d9 00	 sbb	 ecx, 0
  002f1	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002f4	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002f7	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002fb	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  00301	7f 0a		 jg	 SHORT $LN28@operator
  00303	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00307	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 809  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0030d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00310	8b 08		 mov	 ecx, DWORD PTR [eax]
  00312	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00315	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00318	8b f4		 mov	 esi, esp
  0031a	8b ca		 mov	 ecx, edx
  0031c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00322	3b f4		 cmp	 esi, esp
  00324	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00329	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  0032f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00332	8b 08		 mov	 ecx, DWORD PTR [eax]
  00334	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00337	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0033a	8b f4		 mov	 esi, esp
  0033c	8b ca		 mov	 ecx, edx
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00344	3b f4		 cmp	 esi, esp
  00346	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  00351	8b f4		 mov	 esi, esp
  00353	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  0035a	50		 push	 eax
  0035b	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00367	3b f4		 cmp	 esi, esp
  00369	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036e	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00374	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0037a	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00380	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00385	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0038b	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00391	52		 push	 edx
  00392	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0039e	83 c4 08	 add	 esp, 8
  003a1	0f b6 c8	 movzx	 ecx, al
  003a4	85 c9		 test	 ecx, ecx
  003a6	74 0b		 je	 SHORT $LN15@operator

; 810  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 811  : 					{	// insertion failed, quit
; 812  : 					_State |= ios_base::badbit;

  003a8	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003ab	83 c8 04	 or	 eax, 4
  003ae	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 813  : 					break;

  003b1	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 814  : 					}

  003b3	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 815  : 		_Ostr.width(0);

  003b8	8b f4		 mov	 esi, esp
  003ba	6a 00		 push	 0
  003bc	6a 00		 push	 0
  003be	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c9	8b ca		 mov	 ecx, edx
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003d1	3b f4		 cmp	 esi, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 816  : 		_CATCH_IO_(_Ostr)

  003da	8b f4		 mov	 esi, esp
  003dc	6a 01		 push	 1
  003de	6a 04		 push	 4
  003e0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003e8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003eb	8b ca		 mov	 ecx, edx
  003ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003f3	3b f4		 cmp	 esi, esp
  003f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fa	b8 00 00 00 00	 mov	 eax, $LN23@operator
  003ff	c3		 ret	 0
$LN19@operator:
  00400	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00407	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00409	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 817  : 		}
; 818  : 
; 819  : 	_Ostr.setstate(_State);

  00410	8b f4		 mov	 esi, esp
  00412	6a 00		 push	 0
  00414	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00417	50		 push	 eax
  00418	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0041b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0041d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00420	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00423	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00429	3b f4		 cmp	 esi, esp
  0042b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 820  : 	return (_Ostr);

  00430	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00433	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00439	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00440	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00443	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00448	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 821  : 	}

  0044e	52		 push	 edx
  0044f	8b cd		 mov	 ecx, ebp
  00451	50		 push	 eax
  00452	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00458	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045d	58		 pop	 eax
  0045e	5a		 pop	 edx
  0045f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00462	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00469	59		 pop	 ecx
  0046a	5f		 pop	 edi
  0046b	5e		 pop	 esi
  0046c	5b		 pop	 ebx
  0046d	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00470	33 cd		 xor	 ecx, ebp
  00472	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00477	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  0047d	3b ec		 cmp	 ebp, esp
  0047f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00484	8b e5		 mov	 esp, ebp
  00486	5d		 pop	 ebp
  00487	c3		 ret	 0
$LN32@operator:
  00488	01 00 00 00	 DD	 1
  0048c	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00490	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00494	08 00 00 00	 DD	 8
  00498	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  0049c	5f		 DB	 95			; 0000005fH
  0049d	4f		 DB	 79			; 0000004fH
  0049e	6b		 DB	 107			; 0000006bH
  0049f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\пользователь\documents\visual studio 2015\projects\контр 2\лаб.раб. 1\helloworld.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv130 = -220						; size = 4
$T1 = -212						; size = 4
_MOI$ = -8						; size = 4
_main	PROC						; COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 19   : 	setlocale(LC_ALL, "Rus");

  0001e	8b f4		 mov	 esi, esp
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03OJJHGHEE@Rus?$AA@
  00025	6a 00		 push	 0
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  0002d	83 c4 08	 add	 esp, 8
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 20   : 	st *MOI = new st;

  00037	6a 0c		 push	 12			; 0000000cH
  00039	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003e	83 c4 04	 add	 esp, 4
  00041	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00047	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  0004d	89 45 f8	 mov	 DWORD PTR _MOI$[ebp], eax

; 21   : 	MOI->head = NULL;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _MOI$[ebp]
  00053	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN4@main:

; 22   : 	for (;;)
; 23   : 	{
; 24   : 		cout << "Работа со стеком. Выберите команду:" << endl;

  0005a	8b f4		 mov	 esi, esp
  0005c	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MGGHCBNK@?P?$OA?a?n?r?$OA?5?q?n?5?q?r?e?j?n?l?4?5?B?$PL?a?e?p?h?r?e?5?j?n?l?$OA?m@
  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00071	83 c4 08	 add	 esp, 8
  00074	8b c8		 mov	 ecx, eax
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 25   : 		cout << "1 - Добавление элемента" << endl;

  00083	8b f4		 mov	 esi, esp
  00085	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JAMJEBM@1?5?9?5?D?n?a?$OA?b?k?e?m?h?e?5?$PN?k?e?l?e?m?r?$OA?$AA@
  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0009a	83 c4 08	 add	 esp, 8
  0009d	8b c8		 mov	 ecx, eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000a5	3b f4		 cmp	 esi, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 26   : 		cout << "2 - Извлечение элемента" << endl;

  000ac	8b f4		 mov	 esi, esp
  000ae	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PPAFJKKE@2?5?9?5?H?g?b?k?e?w?e?m?h?e?5?$PN?k?e?l?e?m?r?$OA?$AA@
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c3	83 c4 08	 add	 esp, 8
  000c6	8b c8		 mov	 ecx, eax
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 27   : 		cout << "3 - Вывод" << endl;

  000d5	8b f4		 mov	 esi, esp
  000d7	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_09DGFCPOAI@3?5?9?5?B?$PL?b?n?d?$AA@
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ec	83 c4 08	 add	 esp, 8
  000ef	8b c8		 mov	 ecx, eax
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000f7	3b f4		 cmp	 esi, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 28   : 		cout << "4 - Выход" << endl;

  000fe	8b f4		 mov	 esi, esp
  00100	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_09BJEAIKFH@4?5?9?5?B?$PL?u?n?d?$AA@
  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00115	83 c4 08	 add	 esp, 8
  00118	8b c8		 mov	 ecx, eax
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00120	3b f4		 cmp	 esi, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 29   : 		cin >> k;

  00127	8b f4		 mov	 esi, esp
  00129	68 00 00 00 00	 push	 OFFSET ?k@@3HA		; k
  0012e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  0013a	3b f4		 cmp	 esi, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 30   : 		switch (k)

  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?k@@3HA	; k
  00146	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv130[ebp], eax
  0014c	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv130[ebp]
  00152	83 e9 01	 sub	 ecx, 1
  00155	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
  0015b	83 bd 24 ff ff
	ff 03		 cmp	 DWORD PTR tv130[ebp], 3
  00162	0f 87 cb 00 00
	00		 ja	 $LN5@main
  00168	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv130[ebp]
  0016e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN12@main[edx*4]
$LN7@main:

; 31   : 		{
; 32   : 		case 1:
; 33   : 		{cout << "Введите элемент для вставки: " << endl;

  00175	8b f4		 mov	 esi, esp
  00177	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LHDMDAPB@?B?b?e?d?h?r?e?5?$PN?k?e?l?e?m?r?5?d?k?$PP?5?b?q?r?$OA?b?j?h?3?5?$AA@
  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0018c	83 c4 08	 add	 esp, 8
  0018f	8b c8		 mov	 ecx, eax
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00197	3b f4		 cmp	 esi, esp
  00199	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 34   : 		cin >> k;

  0019e	8b f4		 mov	 esi, esp
  001a0	68 00 00 00 00	 push	 OFFSET ?k@@3HA		; k
  001a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  001b1	3b f4		 cmp	 esi, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 		k2[m] = k;

  001b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m@@3HA	; m
  001bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?k@@3HA	; k
  001c3	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?k2@@3PAHA[eax*4], ecx

; 36   : 		m++;

  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m@@3HA	; m
  001cf	83 c0 01	 add	 eax, 1
  001d2	a3 00 00 00 00	 mov	 DWORD PTR ?m@@3HA, eax	; m

; 37   : 		push(k, MOI);

  001d7	8b 45 f8	 mov	 eax, DWORD PTR _MOI$[ebp]
  001da	50		 push	 eax
  001db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?k@@3HA	; k
  001e1	51		 push	 ecx
  001e2	e8 00 00 00 00	 call	 ?push@@YAXHPAUst@@@Z	; push
  001e7	83 c4 08	 add	 esp, 8

; 38   : 		break;

  001ea	eb 47		 jmp	 SHORT $LN5@main
$LN8@main:

; 39   : 		}
; 40   : 		case 2:
; 41   : 		{
; 42   : 			pop(MOI);

  001ec	8b 45 f8	 mov	 eax, DWORD PTR _MOI$[ebp]
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 ?pop@@YAHPAUst@@@Z	; pop
  001f5	83 c4 04	 add	 esp, 4

; 43   : 			break;

  001f8	eb 39		 jmp	 SHORT $LN5@main
$LN9@main:

; 44   : 		}
; 45   : 		case 3:
; 46   : 		{
; 47   : 			cout << "Весь стек: " << endl;

  001fa	8b f4		 mov	 esi, esp
  001fc	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00201	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GHDAOBON@?B?e?q?$PM?5?q?r?e?j?3?5?$AA@
  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00211	83 c4 08	 add	 esp, 8
  00214	8b c8		 mov	 ecx, eax
  00216	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0021c	3b f4		 cmp	 esi, esp
  0021e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 48   : 			pok(MOI);

  00223	8b 45 f8	 mov	 eax, DWORD PTR _MOI$[ebp]
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 ?pok@@YAXPAUst@@@Z	; pok
  0022c	83 c4 04	 add	 esp, 4

; 49   : 			break;

  0022f	eb 02		 jmp	 SHORT $LN5@main
$LN10@main:

; 50   : 		}
; 51   : 		case 4:
; 52   : 		{
; 53   : 			return;

  00231	eb 05		 jmp	 SHORT $LN1@main
$LN5@main:

; 54   : 			break;
; 55   : 		}
; 56   : 
; 57   : 		}
; 58   : 	}

  00233	e9 22 fe ff ff	 jmp	 $LN4@main
$LN1@main:

; 59   : }

  00238	33 c0		 xor	 eax, eax
  0023a	5f		 pop	 edi
  0023b	5e		 pop	 esi
  0023c	5b		 pop	 ebx
  0023d	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00243	3b ec		 cmp	 ebp, esp
  00245	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024a	8b e5		 mov	 esp, ebp
  0024c	5d		 pop	 ebp
  0024d	c3		 ret	 0
  0024e	66 90		 npad	 2
$LN12@main:
  00250	00 00 00 00	 DD	 $LN7@main
  00254	00 00 00 00	 DD	 $LN8@main
  00258	00 00 00 00	 DD	 $LN9@main
  0025c	00 00 00 00	 DD	 $LN10@main
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\пользователь\documents\visual studio 2015\projects\контр 2\лаб.раб. 1\helloworld.cpp
;	COMDAT ?pop@@YAHPAUst@@@Z
_TEXT	SEGMENT
_p$ = -24						; size = 4
_y$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_MyStk$ = 8						; size = 4
?pop@@YAHPAUst@@@Z PROC					; pop, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	st*y = MyStk;

  00028	8b 45 08	 mov	 eax, DWORD PTR _MyStk$[ebp]
  0002b	89 45 f4	 mov	 DWORD PTR _y$[ebp], eax

; 103  : 	int p;
; 104  : 	cin >> p;

  0002e	8b f4		 mov	 esi, esp
  00030	8d 45 e8	 lea	 eax, DWORD PTR _p$[ebp]
  00033	50		 push	 eax
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  : 	if (MyStk->head == NULL)

  00047	8b 45 08	 mov	 eax, DWORD PTR _MyStk$[ebp]
  0004a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0004e	75 30		 jne	 SHORT $LN2@pop

; 106  : 	{
; 107  : 		cout << "пусто!" << endl;

  00050	8b f4		 mov	 esi, esp
  00052	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_06HCKFNCEA@?o?s?q?r?n?$CB?$AA@
  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00067	83 c4 08	 add	 esp, 8
  0006a	8b c8		 mov	 ecx, eax
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 108  : 		return -1;

  00079	83 c8 ff	 or	 eax, -1
  0007c	eb 16		 jmp	 SHORT $LN1@pop

; 109  : 	}
; 110  : 	else

  0007e	eb 14		 jmp	 SHORT $LN1@pop
$LN2@pop:

; 111  : 	{
; 112  : 		rek(p, y, MyStk);

  00080	8b 45 08	 mov	 eax, DWORD PTR _MyStk$[ebp]
  00083	50		 push	 eax
  00084	8b 4d f4	 mov	 ecx, DWORD PTR _y$[ebp]
  00087	51		 push	 ecx
  00088	8b 55 e8	 mov	 edx, DWORD PTR _p$[ebp]
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 ?rek@@YAHHPAUst@@0@Z	; rek
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@pop:

; 113  : 	}
; 114  : 		/*st*y = MyStk;
; 115  : 		for (int i = 0;i<z; i++)
; 116  : 		{
; 117  : 			if((y->head->v>p) && (z >= 2))
; 118  : 			{
; 119  : 				delete y;
; 120  : 				MyStk->head->next = NULL;
; 121  : 				return 0;
; 122  : 			}
; 123  : 			else
; 124  : 				if((y->head->v>p)&&(z==1))
; 125  : 			{	
; 126  : 				y->head =y->head->next;
; 127  : 				MyStk = y;
; 128  : 				return 0;
; 129  : 			}
; 130  : 		
; 131  : 		}*/
; 132  : 	}

  00094	52		 push	 edx
  00095	8b cd		 mov	 ecx, ebp
  00097	50		 push	 eax
  00098	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@pop
  0009e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a3	58		 pop	 eax
  000a4	5a		 pop	 edx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000b8	3b ec		 cmp	 ebp, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
  000c3	90		 npad	 1
$LN7@pop:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN6@pop
$LN6@pop:
  000cc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d0	04 00 00 00	 DD	 4
  000d4	00 00 00 00	 DD	 $LN5@pop
$LN5@pop:
  000d8	70		 DB	 112			; 00000070H
  000d9	00		 DB	 0
?pop@@YAHPAUst@@@Z ENDP					; pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\пользователь\documents\visual studio 2015\projects\контр 2\лаб.раб. 1\helloworld.cpp
;	COMDAT ?pok@@YAXPAUst@@@Z
_TEXT	SEGMENT
_a$ = -20						; size = 4
_e$ = -8						; size = 4
_MyStk$ = 8						; size = 4
?pok@@YAXPAUst@@@Z PROC					; pok, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 136  : 	st* e = MyStk->head;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _MyStk$[ebp]
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	89 4d f8	 mov	 DWORD PTR _e$[ebp], ecx

; 137  : 	int a;
; 138  : 	if (e == NULL)

  00027	83 7d f8 00	 cmp	 DWORD PTR _e$[ebp], 0
  0002b	75 29		 jne	 SHORT $LN2@pok

; 139  : 		cout << "Стек пуст!" << endl;

  0002d	8b f4		 mov	 esi, esp
  0002f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PJPKBBI@?Q?r?e?j?5?o?s?q?r?$CB?$AA@
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00044	83 c4 08	 add	 esp, 8
  00047	8b c8		 mov	 ecx, eax
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@pok:

; 140  : 	while (e != NULL)

  00056	83 7d f8 00	 cmp	 DWORD PTR _e$[ebp], 0
  0005a	74 3a		 je	 SHORT $LN3@pok

; 141  : 	{
; 142  : 		a = e->v;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _e$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	89 4d ec	 mov	 DWORD PTR _a$[ebp], ecx

; 143  : 		cout << a << " ";

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  00069	8b f4		 mov	 esi, esp
  0006b	8b 45 ec	 mov	 eax, DWORD PTR _a$[ebp]
  0006e	50		 push	 eax
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00088	83 c4 08	 add	 esp, 8

; 144  : 		e = e->next;

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _e$[ebp]
  0008e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00091	89 4d f8	 mov	 DWORD PTR _e$[ebp], ecx

; 145  : 	}

  00094	eb c0		 jmp	 SHORT $LN2@pok
$LN3@pok:

; 146  : 	cout << endl;

  00096	8b f4		 mov	 esi, esp
  00098	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 147  : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000b9	3b ec		 cmp	 ebp, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
?pok@@YAXPAUst@@@Z ENDP					; pok
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\пользователь\documents\visual studio 2015\projects\контр 2\лаб.раб. 1\helloworld.cpp
;	COMDAT ?push@@YAXHPAUst@@@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_e$ = -8						; size = 4
_x$ = 8							; size = 4
_MyStk$ = 12						; size = 4
?push@@YAXHPAUst@@@Z PROC				; push, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 62   : 	st* e = new st;

  0001e	6a 0c		 push	 12			; 0000000cH
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	83 c4 04	 add	 esp, 4
  00028	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0002e	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00034	89 45 f8	 mov	 DWORD PTR _e$[ebp], eax

; 63   : 	e->v = x;

  00037	8b 45 f8	 mov	 eax, DWORD PTR _e$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0003d	89 08		 mov	 DWORD PTR [eax], ecx

; 64   : 	e->next = MyStk->head;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _e$[ebp]
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _MyStk$[ebp]
  00045	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00048	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 65   : 	MyStk->head = e;

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _MyStk$[ebp]
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _e$[ebp]
  00051	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 66   : 	z++;

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?z@@3HA	; z
  00059	83 c0 01	 add	 eax, 1
  0005c	a3 00 00 00 00	 mov	 DWORD PTR ?z@@3HA, eax	; z

; 67   : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?push@@YAXHPAUst@@@Z ENDP				; push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\type_traits
;	COMDAT ??$move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAH@std@@YA$$QAHAAH@Z PROC			; std::move<int &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\utility
;	COMDAT ??$swap@HX@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Tmp$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@HX@std@@YAXAAH0@Z PROC				; std::swap<int,void>, COMDAT

; 48   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 49   : 	_Ty _Tmp = _STD move(_Left);

  00028	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$move@AAH@std@@YA$$QAHAAH@Z ; std::move<int &>
  00031	83 c4 04	 add	 esp, 4
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	89 4d f4	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 50   : 	_Left = _STD move(_Right);

  00039	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??$move@AAH@std@@YA$$QAHAAH@Z ; std::move<int &>
  00042	83 c4 04	 add	 esp, 4
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00048	8b 10		 mov	 edx, DWORD PTR [eax]
  0004a	89 11		 mov	 DWORD PTR [ecx], edx

; 51   : 	_Right = _STD move(_Tmp);

  0004c	8d 45 f4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$move@AAH@std@@YA$$QAHAAH@Z ; std::move<int &>
  00055	83 c4 04	 add	 esp, 4
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0005b	8b 10		 mov	 edx, DWORD PTR [eax]
  0005d	89 11		 mov	 DWORD PTR [ecx], edx

; 52   : 	}

  0005f	52		 push	 edx
  00060	8b cd		 mov	 ecx, ebp
  00062	50		 push	 eax
  00063	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@swap
  00069	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006e	58		 pop	 eax
  0006f	5a		 pop	 edx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
  0008e	66 90		 npad	 2
$LN5@swap:
  00090	01 00 00 00	 DD	 1
  00094	00 00 00 00	 DD	 $LN4@swap
$LN4@swap:
  00098	f4 ff ff ff	 DD	 -12			; fffffff4H
  0009c	04 00 00 00	 DD	 4
  000a0	00 00 00 00	 DD	 $LN3@swap
$LN3@swap:
  000a4	5f		 DB	 95			; 0000005fH
  000a5	54		 DB	 84			; 00000054H
  000a6	6d		 DB	 109			; 0000006dH
  000a7	70		 DB	 112			; 00000070H
  000a8	00		 DB	 0
??$swap@HX@std@@YAXAAH0@Z ENDP				; std::swap<int,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 605  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 606  : 		return (EOF);

  0001e	83 c8 ff	 or	 eax, -1

; 607  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 594  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 595  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002a	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00034	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00036	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00040	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 596  : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\программы\microsoft visual studio\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 523  : 		return (*_First == 0 ? 0

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00024	85 c9		 test	 ecx, ecx
  00026	75 0c		 jne	 SHORT $LN3@length
  00028	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  00032	eb 12		 jmp	 SHORT $LN4@length
$LN3@length:
  00034	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _strlen
  0003d	83 c4 04	 add	 esp, 4
  00040	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN4@length:
  00046	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\пользователь\documents\visual studio 2015\projects\контр 2\лаб.раб. 1\helloworld.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\пользователь\documents\visual studio 2015\projects\контр 2\лаб.раб. 1\helloworld.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 148  : }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
